name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual triggering, primarily for production deployment

env:
  IMAGE_NAME_BASE: ${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Required to push to GHCR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build_and_push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }} # Push on merge to main or manual trigger
          tags: |
            ghcr.io/${{ env.IMAGE_NAME_BASE }}:latest
            ghcr.io/${{ env.IMAGE_NAME_BASE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    
    services:
      postgres_test:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        env:
          CURRENCY_API_KEY: "test_api_key_unit" 
          DB_HOST: localhost 
          DB_PORT: 1234 
          DB_NAME: unit_test_db
          DB_USER: unit_test_user
          DB_PASSWORD: unit_test_password
        run: pytest tests/unit

      - name: Run Integration Tests
        env:
          DB_HOST: localhost 
          DB_PORT: 5432 
          DB_NAME: testdb 
          DB_USER: testuser 
          DB_PASSWORD: testpassword 
          CURRENCY_API_KEY: "test_api_key_integration" 
          SCRIPT_MODE: "run_once" 
        run: pytest tests/integration

  deploy_development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Auto-deploy on merge to main
    environment:
      name: development
      url: ${{ secrets.DEV_APP_URL }}

    steps:
      - name: Checkout code (for docker-compose.yml)
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}

      - name: Add dev server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DEV_SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to development server
        env:
          # Secrets and config for the .env file on the server
          ENV_CURRENCY_API_KEY: ${{ secrets.DEV_CURRENCY_API_KEY }}
          ENV_DB_NAME: ${{ secrets.DEV_DB_NAME }}
          ENV_DB_USER: ${{ secrets.DEV_DB_USER }}
          ENV_DB_PASSWORD: ${{ secrets.DEV_DB_PASSWORD }}
          # Other .env values
          ENV_DB_HOST: db 
          ENV_DB_PORT: 5432
          ENV_SCRIPT_MODE: schedule
          ENV_PYTHONUNBUFFERED: "1"
          ENV_PYTHONIOENCODING: UTF-8
          
          # Deployment details
          IMAGE_TAG: ${{ github.sha }}
          FULL_IMAGE_NAME: ghcr.io/${{ env.IMAGE_NAME_BASE }}
          SERVER_USER_AT_HOST: ${{ secrets.DEV_SERVER_USERNAME }}@${{ secrets.DEV_SERVER_HOST }}
          APP_PATH: /opt/daily-currency-rate-dev 
          COMPOSE_FILE_PATH: ${{ github.workspace }}/docker-compose.yml

        run: |
          echo "Starting deployment to development..."
          echo "Image to deploy: ${FULL_IMAGE_NAME}:${IMAGE_TAG}"

          ENV_CONTENT="CURRENCY_API_KEY=${ENV_CURRENCY_API_KEY}\n"
          ENV_CONTENT="${ENV_CONTENT}DB_HOST=${ENV_DB_HOST}\n"
          ENV_CONTENT="${ENV_CONTENT}DB_PORT=${ENV_DB_PORT}\n"
          ENV_CONTENT="${ENV_CONTENT}DB_NAME=${ENV_DB_NAME}\n"
          ENV_CONTENT="${ENV_CONTENT}DB_USER=${ENV_DB_USER}\n"
          ENV_CONTENT="${ENV_CONTENT}DB_PASSWORD=${ENV_DB_PASSWORD}\n"
          ENV_CONTENT="${ENV_CONTENT}SCRIPT_MODE=${ENV_SCRIPT_MODE}\n"
          ENV_CONTENT="${ENV_CONTENT}PYTHONUNBUFFERED=${ENV_PYTHONUNBUFFERED}\n"
          ENV_CONTENT="${ENV_CONTENT}PYTHONIOENCODING=${ENV_PYTHONIOENCODING}"

          ssh -o StrictHostKeyChecking=no ${SERVER_USER_AT_HOST} bash -s -- <<EOF
            set -e 
            echo "Connected to server: ${SERVER_USER_AT_HOST}"
            echo "Creating application directory: ${APP_PATH}"
            mkdir -p ${APP_PATH}
            cd ${APP_PATH}

            echo "Writing .env file to ${APP_PATH}/.env"
            echo -e "${ENV_CONTENT}" > .env
          EOF

          echo "Copying docker-compose.yml to server..."
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${COMPOSE_FILE_PATH} ${SERVER_USER_AT_HOST}:${APP_PATH}/docker-compose.yml

          ssh -o StrictHostKeyChecking=no ${SERVER_USER_AT_HOST} bash -s -- \
            "${FULL_IMAGE_NAME}" "${IMAGE_TAG}" "${APP_PATH}" << 'EOF_SERVER_SCRIPT'
            set -e
            ARG_FULL_IMAGE_NAME="$1"
            ARG_IMAGE_TAG="$2"
            ARG_APP_PATH="$3"

            cd "${ARG_APP_PATH}"
            echo "Current directory on server: \$(pwd)"

            echo "Pulling Docker image: ${ARG_FULL_IMAGE_NAME}:${ARG_IMAGE_TAG}"
            docker pull "${ARG_FULL_IMAGE_NAME}:${ARG_IMAGE_TAG}"

            echo "Updating image tag in docker-compose.yml on server..."
            sed -i "s|image: ${ARG_FULL_IMAGE_NAME}:.*|image: ${ARG_FULL_IMAGE_NAME}:${ARG_IMAGE_TAG}|g" docker-compose.yml
            
            echo "Running docker-compose up..."
            docker-compose -f docker-compose.yml --env-file .env up -d --remove-orphans

            echo "Pruning old Docker images..."
            docker image prune -af

            echo "Deployment to development completed."
          EOF_SERVER_SCRIPT

  deploy_production:
    name: Deploy to Production (Manual)
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.event_name == 'workflow_dispatch' # Manual trigger only
    environment:
      name: production
      url: ${{ secrets.PROD_APP_URL }}

    steps:
      - name: Checkout code (for docker-compose.yml)
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}

      - name: Add prod server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to production server
        env:
          # Secrets and config for the .env file on the server
          ENV_CURRENCY_API_KEY: ${{ secrets.PROD_CURRENCY_API_KEY }}
          ENV_DB_NAME: ${{ secrets.PROD_DB_NAME }}
          ENV_DB_USER: ${{ secrets.PROD_DB_USER }}
          ENV_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          # Other .env values
          ENV_DB_HOST: db 
          ENV_DB_PORT: 5432
          ENV_SCRIPT_MODE: schedule
          ENV_PYTHONUNBUFFERED: "1"
          ENV_PYTHONIOENCODING: UTF-8
          
          # Deployment details
          IMAGE_TAG: ${{ github.sha }} # Uses the SHA of the commit that triggered the manual run
          FULL_IMAGE_NAME: ghcr.io/${{ env.IMAGE_NAME_BASE }}
          SERVER_USER_AT_HOST: ${{ secrets.PROD_SERVER_USERNAME }}@${{ secrets.PROD_SERVER_HOST }}
          APP_PATH: /opt/daily-currency-rate-prod
          COMPOSE_FILE_PATH: ${{ github.workspace }}/docker-compose.yml

        run: |
          echo "Starting deployment to production..."
          echo "Image to deploy: ${FULL_IMAGE_NAME}:${IMAGE_TAG}"

          ENV_CONTENT="CURRENCY_API_KEY=${ENV_CURRENCY_API_KEY}\n"
          ENV_CONTENT="${ENV_CONTENT}DB_HOST=${ENV_DB_HOST}\n"
          ENV_CONTENT="${ENV_CONTENT}DB_PORT=${ENV_DB_PORT}\n"
          ENV_CONTENT="${ENV_CONTENT}DB_NAME=${ENV_DB_NAME}\n"
          ENV_CONTENT="${ENV_CONTENT}DB_USER=${ENV_DB_USER}\n"
          ENV_CONTENT="${ENV_CONTENT}DB_PASSWORD=${ENV_DB_PASSWORD}\n"
          ENV_CONTENT="${ENV_CONTENT}SCRIPT_MODE=${ENV_SCRIPT_MODE}\n"
          ENV_CONTENT="${ENV_CONTENT}PYTHONUNBUFFERED=${ENV_PYTHONUNBUFFERED}\n"
          ENV_CONTENT="${ENV_CONTENT}PYTHONIOENCODING=${ENV_PYTHONIOENCODING}"

          ssh -o StrictHostKeyChecking=no ${SERVER_USER_AT_HOST} bash -s -- <<EOF
            set -e
            echo "Connected to server: ${SERVER_USER_AT_HOST}"
            echo "Creating application directory: ${APP_PATH}"
            mkdir -p ${APP_PATH}
            cd ${APP_PATH}

            echo "Writing .env file to ${APP_PATH}/.env"
            echo -e "${ENV_CONTENT}" > .env
          EOF

          echo "Copying docker-compose.yml to server..."
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${COMPOSE_FILE_PATH} ${SERVER_USER_AT_HOST}:${APP_PATH}/docker-compose.yml
          
          ssh -o StrictHostKeyChecking=no ${SERVER_USER_AT_HOST} bash -s -- \
            "${FULL_IMAGE_NAME}" "${IMAGE_TAG}" "${APP_PATH}" << 'EOF_SERVER_SCRIPT'
            set -e
            ARG_FULL_IMAGE_NAME="$1"
            ARG_IMAGE_TAG="$2"
            ARG_APP_PATH="$3"

            cd "${ARG_APP_PATH}"
            echo "Current directory on server: \$(pwd)"

            echo "Pulling Docker image: ${ARG_FULL_IMAGE_NAME}:${ARG_IMAGE_TAG}"
            docker pull "${ARG_FULL_IMAGE_NAME}:${ARG_IMAGE_TAG}"

            echo "Updating image tag in docker-compose.yml on server..."
            sed -i "s|image: ${ARG_FULL_IMAGE_NAME}:.*|image: ${ARG_FULL_IMAGE_NAME}:${ARG_IMAGE_TAG}|g" docker-compose.yml
            
            echo "Running docker-compose up..."
            docker-compose -f docker-compose.yml --env-file .env up -d --remove-orphans

            echo "Pruning old Docker images..."
            docker image prune -af

            echo "Deployment to production completed."
          EOF_SERVER_SCRIPT
